
< 스터디로 짚어보는 정보 >

1. MVC 패턴
    - 클라이언트와의 요청, 응답 부분과 DB 를 통한 데이터 처리 및 화면 처리를 서로 분리하여
      각 클래스의 책임에 집중한 패턴

2. JPA 에서 식별자 값을 Long 이라는 래퍼 클래스로 감싸는 이유
    - 엔티티 생성시, 식별자 값 자동 할당 설정으로 인해 null 로 저장되어야 하기 때문

3. HTTP
    - 웹 서비스에서 사용하는 프로토콜
    - 클라의 다양한 요청을 메서드를 통해 서버로 보내는 역할을 수행
    - 대표적인 메서드 : POST, GET, PATCH, DELETE

3. REST API
    - MVC 패턴의 특징은 뷰와 데이터를 클라이언트에 응답한다는 것
    - REST API 는 서버의 자원을 클라이언트에 구애받지 않고 사용할 수 있게 하는 설계 방식으로,
      HTTP 요청에 대한 응답으로 서버의 자원을 반환
    - 서버에서 보내는 응답이 특정 기기 및 화면에 종속되지 않도록 모든 기기에서 통용될 수 있는 데이터를 반환
    - 즉, REST API 를 활용하면 서버는 클라이언트의 요청에 대한 응답으로 화면이 아닌 데이터를 전송함 : JSON / XML 형식

    - 요청과 응답은 HTTP 메시지에 실려 전송되는데, 시작 라인, 헤더, 본문으로 구성
        -- HTTP 요청 메시지 --
        시작 라인 : 사용하는 HTTP 버전, 요청의 종류, URL 경로
        헤더 : 호스트 주소(어디로 보낼지에 대한 주소)
        본문 : 보낼 데이터

        -- HTTP 응답 메시지 --
        시작 라인 : 사용하는 HTTP 버전, 상태 코드
        헤더 : 응답을 보낸 날짜, 응답 데이터 형식 등
        본문 : 서버에서 HTTP 메시지에 실어 보낸 실제 데이터

    - Rest 컨트롤러
        - REST API 로 설계된 URL 요청을 받아 처리하는 컨트롤러
        - 일반 컨트롤러가 뷰 페이지를 반환한다면 REST 컨트롤러는 JSON 이나 텍스트 같은 데이터를 반환

    - ResponseEntity
        - REST 컨트롤러의 반환형, 즉 REST API 의 응답을 위해 사용하는 클래스
        - REST API 요청을 받아 응답할 때, 이 클래스에 HTTP 상태 코드, 헤더, 본문을 실어 보낼 수 있음

번외. API
    - 개발을 위해 미리 만들어진 약속
    - 클라이언트가 서버의 자원을 요청할 수 있도록 서버 측에서 제공하는 인터페이스
    - 즉, REST API 란, 클라와 서버 간의 상호작용, 즉 HTTP 요청에 따른 JSON 응답에 대한 약속을 의미


번외. @Data
    - @Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode 포함
    - 빈생성자, 모든 인스턴스 변수를 초기화하는 생성자 포함 X

번외. {{mustache}} 데이터가 null 이면..
    - com.samskivert.mustache.MustacheException$Context: No key, method or field with name .... 발생
    - 대처
        1. 애초부터 해당 데이터에 null 이 안들어가도록 처리
        2. mustache 데이터에 대한 null 처리
            {{#content}}
                {{content}}     // 데이터가 있는 경우
            {{/content}}
            {{^content}}
                널 값이지롱      // 데이터가 null 인 경우
            {{/content}}